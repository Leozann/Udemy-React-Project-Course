{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adzano\\\\Desktop\\\\ini masuk git\\\\02-starting-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Card from './components/General/Card';\nimport HeaderApp from './components/General/Header';\nimport InvestInput from './components/Investment/InvestInput';\nimport ResultList from './components/Result/ResultList';\nimport DisplayStyles from './styles/Display.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  const [investData, setInvestData] = useState('');\n  const getAllData = inputData => {\n    console.log('in App.js');\n    setInvestData(prevData => {\n      return {\n        ...prevData,\n        ...inputData\n      };\n    });\n  };\n  // console.log(investData)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HeaderApp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: `${DisplayStyles['display-center']}`,\n      children: /*#__PURE__*/_jsxDEV(InvestInput, {\n        getInputData: getAllData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultList, {\n      setDataInvest: investData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SQAcfw0/6xj8j1ma51xKnQn5TiU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Card","HeaderApp","InvestInput","ResultList","DisplayStyles","jsxDEV","_jsxDEV","App","_s","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","investData","setInvestData","getAllData","inputData","console","log","prevData","children","fileName","_jsxFileName","lineNumber","columnNumber","className","getInputData","setDataInvest","_c","$RefreshReg$"],"sources":["C:/Users/Adzano/Desktop/ini masuk git/02-starting-project/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport Card from './components/General/Card';\nimport HeaderApp from './components/General/Header';\nimport InvestInput from './components/Investment/InvestInput';\nimport ResultList from './components/Result/ResultList';\n\nimport DisplayStyles from './styles/Display.module.css'\n\nfunction App() {\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  const [investData, setInvestData] = useState('');\n\n  const getAllData = (inputData) => {\n    console.log('in App.js')\n    setInvestData((prevData) => {\n      return { ...prevData, ...inputData }\n    })\n  }\n  // console.log(investData)\n  return (\n    <div>\n      <HeaderApp />\n      <Card className={`${DisplayStyles['display-center']}`}>\n        <InvestInput getInputData={getAllData}></InvestInput>\n      </Card>\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n\n      <ResultList setDataInvest={investData} />\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,2BAA2B;AAC5C,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,WAAW,MAAM,qCAAqC;AAC7D,OAAOC,UAAU,MAAM,gCAAgC;AAEvD,OAAOC,aAAa,MAAM,6BAA6B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACtC;IACA;;IAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;EACF,CAAC;;EAED,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMwB,UAAU,GAAIC,SAAS,IAAK;IAChCC,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IACxBJ,aAAa,CAAEK,QAAQ,IAAK;MAC1B,OAAO;QAAE,GAAGA,QAAQ;QAAE,GAAGH;MAAU,CAAC;IACtC,CAAC,CAAC;EACJ,CAAC;EACD;EACA,oBACElB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA,CAACL,SAAS;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACb1B,OAAA,CAACN,IAAI;MAACiC,SAAS,EAAG,GAAE7B,aAAa,CAAC,gBAAgB,CAAE,EAAE;MAAAwB,QAAA,eACpDtB,OAAA,CAACJ,WAAW;QAACgC,YAAY,EAAEX;MAAW;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAc;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,eAIP1B,OAAA,CAACH,UAAU;MAACgC,aAAa,EAAEd;IAAW;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEtC,CAAC;AAEV;AAACxB,EAAA,CAlDQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AAoDZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}