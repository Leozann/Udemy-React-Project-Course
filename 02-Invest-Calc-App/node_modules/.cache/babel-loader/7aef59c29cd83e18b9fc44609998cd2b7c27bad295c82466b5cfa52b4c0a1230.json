{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adzano\\\\Desktop\\\\ini masuk git\\\\02-starting-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Card from './components/GeneralComponent/Card';\nimport HeaderApp from './components/GeneralComponent/Header';\nimport InvestInput from './components/InvestmentComponent/InvestInput';\nimport ResultTable from './components/ResultComponent/ResultTable';\nimport DisplayStyles from './styles/Display.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const calculateHandler = (userInput) => {\n  //   // Should be triggered when form is submitted\n  //   // You might not directly want to bind it to the submit event on the form though...\n\n  //   const yearlyData = []; // per-year results\n\n  //   let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  //   const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  //   const expectedReturn = +userInput['expected-return'] / 100;\n  //   const duration = +userInput['duration'];\n\n  //   // The below code calculates yearly results (total savings, interest etc)\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn;\n  //     currentSavings += yearlyInterest + yearlyContribution;\n  //     yearlyData.push({\n  //       // feel free to change the shape of the data pushed to the array!\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest,\n  //       savingsEndOfYear: currentSavings,\n  //       yearlyContribution: yearlyContribution,\n  //     });\n  //   }\n\n  //   // do something with yearlyData ...\n  // };\n\n  const [investData, setInvestData] = useState(null);\n  const getAllData = inputData => {\n    setInvestData(prevData => {\n      return {\n        ...prevData,\n        ...inputData\n      };\n    });\n  };\n  // const yearlyData = []\n  // if (investData) {\n  //   let currentSavings = investData['current-savings'];\n  //   const yearlyContribution = investData['yearly-contribution'];\n  //   const expectedReturn = investData['expected-return'] / 100;\n  //   const duration = investData['invest-duration'];\n\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn;\n  //     currentSavings += yearlyInterest + yearlyContribution;\n  //     yearlyData.push({\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest,\n  //       savingsEndOfYear: currentSavings,\n  //       yearlyContribution: yearlyContribution,\n  //     });\n  //   }\n  // }\n  // console.log(yearlyData)\n  // console.log(investData)\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HeaderApp, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: `${DisplayStyles['display-center']}`,\n      children: /*#__PURE__*/_jsxDEV(InvestInput, {\n        getInputData: getAllData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PgQQdnYXBskgQBBXdDLtgMrfz2Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Card","HeaderApp","InvestInput","ResultTable","DisplayStyles","jsxDEV","_jsxDEV","App","_s","investData","setInvestData","getAllData","inputData","prevData","children","fileName","_jsxFileName","lineNumber","columnNumber","className","getInputData","_c","$RefreshReg$"],"sources":["C:/Users/Adzano/Desktop/ini masuk git/02-starting-project/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport Card from './components/GeneralComponent/Card';\nimport HeaderApp from './components/GeneralComponent/Header';\nimport InvestInput from './components/InvestmentComponent/InvestInput';\nimport ResultTable from './components/ResultComponent/ResultTable';\n\nimport DisplayStyles from './styles/Display.module.css'\n\nfunction App() {\n  // const calculateHandler = (userInput) => {\n  //   // Should be triggered when form is submitted\n  //   // You might not directly want to bind it to the submit event on the form though...\n\n  //   const yearlyData = []; // per-year results\n\n  //   let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  //   const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  //   const expectedReturn = +userInput['expected-return'] / 100;\n  //   const duration = +userInput['duration'];\n\n  //   // The below code calculates yearly results (total savings, interest etc)\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn;\n  //     currentSavings += yearlyInterest + yearlyContribution;\n  //     yearlyData.push({\n  //       // feel free to change the shape of the data pushed to the array!\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest,\n  //       savingsEndOfYear: currentSavings,\n  //       yearlyContribution: yearlyContribution,\n  //     });\n  //   }\n\n  //   // do something with yearlyData ...\n  // };\n\n  const [investData, setInvestData] = useState(null);\n\n  const getAllData = (inputData) => {\n    setInvestData((prevData) => {\n      return { ...prevData, ...inputData }\n    })\n  }\n  // const yearlyData = []\n  // if (investData) {\n  //   let currentSavings = investData['current-savings'];\n  //   const yearlyContribution = investData['yearly-contribution'];\n  //   const expectedReturn = investData['expected-return'] / 100;\n  //   const duration = investData['invest-duration'];\n\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn;\n  //     currentSavings += yearlyInterest + yearlyContribution;\n  //     yearlyData.push({\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest,\n  //       savingsEndOfYear: currentSavings,\n  //       yearlyContribution: yearlyContribution,\n  //     });\n  //   }\n  // }\n  // console.log(yearlyData)\n  // console.log(investData)\n  return (\n    <div>\n      <HeaderApp />\n      <Card className={`${DisplayStyles['display-center']}`}>\n        <InvestInput getInputData={getAllData}></InvestInput>\n      </Card>\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      {/* <ResultTable sendDataToTableContent={yearlyData} /> */}\n      {/* {!investData && <p>No Calculated Yet</p>}\n      {investData && <ResultTable sendDataToTableContent={yearlyData} setSaving={investData['current-savings']} investData={investData} />} */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,oCAAoC;AACrD,OAAOC,SAAS,MAAM,sCAAsC;AAC5D,OAAOC,WAAW,MAAM,8CAA8C;AACtE,OAAOC,WAAW,MAAM,0CAA0C;AAElE,OAAOC,aAAa,MAAM,6BAA6B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAElD,MAAMY,UAAU,GAAIC,SAAS,IAAK;IAChCF,aAAa,CAAEG,QAAQ,IAAK;MAC1B,OAAO;QAAE,GAAGA,QAAQ;QAAE,GAAGD;MAAU,CAAC;IACtC,CAAC,CAAC;EACJ,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACEN,OAAA;IAAAQ,QAAA,gBACER,OAAA,CAACL,SAAS;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACbZ,OAAA,CAACN,IAAI;MAACmB,SAAS,EAAG,GAAEf,aAAa,CAAC,gBAAgB,CAAE,EAAE;MAAAU,QAAA,eACpDR,OAAA,CAACJ,WAAW;QAACkB,YAAY,EAAET;MAAW;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAc;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAMJ,CAAC;AAEV;AAACV,EAAA,CApEQD,GAAG;AAAAc,EAAA,GAAHd,GAAG;AAsEZ,eAAeA,GAAG;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}